<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.spring2.mapper.MemberMapper">
	<!-- 회원가입 -->
	<insert id="signUp">
		insert into member
		(id,password,name,email,phone,gender,birth_y,birth_m,birth_d)
		values(#{id},#{password},#{name},#{email},#{phone},#{gender},#{birth_y},#{birth_m},#{birth_d})
	</insert>
	<insert id="createDes">
		insert into destination
		(id,name,phone,address)
		values(#{id},#{name},#{phone},#{address})
	</insert>
	<!-- 로그인 -->
	<select id="login" resultType="org.spring2.model.MemberVO">
		select * from member where
		id=#{id} and password=#{password};
	</select>
	<!-- 아이디 중복확인 -->
	<select id="idchk" resultType="org.spring2.model.MemberVO">
		select * from member where
		id=#{str};
	</select>
	<!-- 이메일 중복확인 -->
	<select id="emchk" resultType="org.spring2.model.MemberVO">
		select * from member where
		email like concat(#{str},'%');
	</select>
	<!-- 전화번호 중복확인 -->
	<select id="phchk" resultType="org.spring2.model.MemberVO">
		select * from member where
		phone=#{str};
	</select>
	
	<!-- 아이디 비밀번호 찾기 -->
	<select id="find" resultType="org.spring2.model.MemberVO">
		select * from member
		<choose>
		<when test="id==null">
			<choose>
				<when test="phone==null">
					where name=#{name} and email=#{email};
				</when>
				<otherwise>
					where name=#{name} and phone=#{phone};
				</otherwise>
			</choose>
		</when>
		<otherwise>
			<choose>
				<when test="phone==null">
					where id=#{id} and name=#{name} and email=#{email};
				</when>
				<otherwise>
					where id=#{id} and name=#{name} and phone=#{phone};
				</otherwise>
			</choose>
		</otherwise>
		</choose>
	</select>
	
	
	<!-- 개인정보 수정을 위한 비밀번호 확인 -->
	<select id="modify" resultType="org.spring2.model.MemberVO">
		select * from member where
		id=#{id} and password=#{password};
	</select>
	<!-- 이메일 수정 -->
	<update id="modifyEmail">
		update member
 		set email = #{email}
		where id=#{id};
	</update>
	<!-- 전화번호 수정 -->
	<update id="modifyPhone">
		update member
 		set phone = #{phone}
		where id=#{id};
	</update>
	<!-- 비밀번호 수정 -->
	<update id="modifyPw">
		update member
 		set password = #{password}
		where id=#{id};
	</update>
	<select id="modifyNewInfo" resultType="org.spring2.model.MemberVO">
		select * from member where id=#{id};
	</select>
	<!-- 계정삭제 -->
	<delete id="modifyDelete">
		delete from member
		where id=#{id};
	</delete>
	<!-- 비밀번호 수정 -->
	<update id="modifyimg">
		update member
 		set userImg = #{userImg}
		where id=#{id};
	</update>
	<select id="destinationGet" resultType="org.spring2.model.DestinationVO">
		select *
		from destination
		where id=#{id};
	</select>
	<insert id="destinationPost">
		insert into destination(id,dname,name,phone,address,dmemo)
		values(#{id},#{dname},#{name},#{phone},#{address},#{dmemo});
	</insert>
	<update id="destinationPut">
		update destination
		set dname=#{dname},name=#{name},phone=#{phone},address=#{address},dmemo=#{dmemo}
		where dno=#{dno};
	</update>
	<delete id="destinationDelete">
		delete from destination
		where dno=#{dno};
	</delete>
	<select id="memberListGet" resultType="org.spring2.model.MemberVO">
		select *
		from member
		where admin=false
		
		<if test="id != null">		
		and id like concat('%',#{id},'%')
		</if>
		;
	</select>
	<select id="memberDetail" resultType="org.spring2.model.MemberVO">
		select *
		from member
		where id=#{id};
	</select>
	<select id="snsCheck" resultType="org.spring2.model.MemberVO">
		select *
		from member
		where id=#{id};
	</select>
	<insert id="snsSignup">
		insert into member
		(id,password,name,email,phone,gender,birth_y,birth_m,birth_d,sns)
		values(#{id},#{password},#{name},#{email},#{id},"m","1000",#{birth_m},#{birth_d},true);
	</insert>
	<insert id="naverSignup">
		insert into member
		(id,password,name,email,phone,gender,birth_y,birth_m,birth_d,sns,userImg)
		values(#{id},#{email},#{name},#{email},#{email},#{gender},"1000",#{birth_m},#{birth_d},true,#{userImg});
	</insert>
	<insert id="googleSignup">
		insert into member
		(id,password,name,email,phone,gender,birth_y,birth_m,birth_d,sns,userImg)
		values(#{id},#{password},#{name},#{email},#{phone},"m",#{birth_y},#{birth_m},#{birth_d},true,#{userImg});
	</insert>
	<resultMap type="org.spring2.model.CouponTargetVO" id="CouponTargetVO">
		<result column="exp_date" property="exp_date" />
		<collection property="cpvo" resultMap="CouponVO" />
	</resultMap>
	<resultMap type="org.spring2.model.CouponVO" id="CouponVO">
		<result column="cptype" property="cptype" />
		<result column="cpname" property="cpname" />
		<result column="cpvalue" property="cpvalue" />
		<result column="cpmax" property="cpmax" />
		<result column="cpreq" property="cpreq" />
	</resultMap>
	
	<select id="mypageCouponList" resultMap="CouponTargetVO">
		select cptype,cpname,cpvalue,cpmax,cpreq,EXP_DATE
		from COUPON_TARGET ct
		join COUPON c
		on c.CPNO =ct.CPNO
		where id=#{id} and used=0;
	</select>
	<insert id="point">
		insert into point(id)
		value(#{id});
	</insert>
	<resultMap type="org.spring2.model.ReviewVO" id="ReviewVO">
		<result column="pno" property="pno" />
		<result column="content" property="content" />
		<result column="regdate" property="regdate" />
		<result column="uuid" property="uuid" />
		<result column="uploadpath" property="uploadpath" />
		<result column="filename" property="filename" />
		<result column="image" property="image" />
		<collection property="bvo" resultMap="BoardVO" />
	</resultMap>
	<resultMap type="org.spring2.model.BoardVO" id="BoardVO">
		<result column="pname" property="pname" />
		<collection property="img" resultMap="ImageVO" />
	</resultMap>
	<resultMap type="org.spring2.model.ImageVO" id="ImageVO">
		<result column="fullPath" property="fullPath" />
	</resultMap>
	<select id="mypageReviewList" resultMap="ReviewVO">
		select r.*, fullPath, pname
		from review r
		left join
		(select p.pno, fullPath, pname
				from product p
				join p_image i
				on p.pno=i.pno) as pi
		on r.pno=pi.pno
		where id=#{search}
		order by regdate desc;
		
	</select>
	<select id="mypageQnaList" resultType="org.spring2.model.InquiryVO">
		select * from inquiry where id=#{id};
	</select>
	<select id="total" resultType="int">
  		select count(*) from review
  		where id=#{search};
  	</select>
</mapper>